/**
 * SWT Wizard to set a color based of property value
 * 
 * @license Apache-2.0 cf LICENSE-2.0.txt
 * @author rchevallier
 * @copyright 2023 rchevallier
 * @see {@link ../doc/Colormap.md}
 */

load(__DIR__ + "lib/misc.js");
log.level = LogLevel.INFO;
if (log.level <= LogLevel.DEBUG) {
    console.clear();
    console.show();
}

load(__DIR__ + "lib/ColormapModel.js")
load(__DIR__ + "lib/ColormapWizard.js")


/**
 * Will gather all properties of all elements visual objects in the view (no relationships)
 * and for each property, the set of found values
 * TODO: extend to support relationship schemes
 * @param {ArchimateView} view the view to gather from
 * @returns {{[x:string]: string[]}} alphabetically ordered property names and associated labels
 */
function gatherViewPropertiesInfo(view) {
    /** 
     * @type {Map<string,Set<string>>} 
     */
    const props = new Map(); 
    $(view).find("element").each (
        (e) => {
            for (let p of e.prop()) {
                if (!props.has(p))
                    props.set(p, new Set())
                props.get(p).add(e.prop(p));
            }
        }
    )
    // sorting alphabetically by property names and labels (as Array)
    const result = Object.fromEntries([...props.entries()].sort().map(([pname, labels]) => [pname, [...labels].sort()]));
    log.trace('collected:' + JSON.stringify(result, null, 2))
    return result;
}


/**
 * @typedef {{colormap: {[x: string]: string}, name: string, type: string, resetDefault: boolean}} ColorScheme
 * 
 * Apply to the view the heatmap as configured by the wizard
 * @param {ArchimateView} view 
 * @param {ColorScheme} scheme
 */
function applyColormap(view, scheme)
{
    $(view).find("element").each(
        (vo) => {
            const label = vo.prop(scheme.name);
            if (label && (label in scheme.colormap)) {
                vo.fillColor =  scheme.colormap[label];
            } else if (scheme.resetDefault) {
                vo.fillColor = null
            }
        }
    );
    // then we save the ref as the last applied colormap for the view, so it can be reapplied without wizard
    view.prop(".colormap.property", scheme.name);
}


/**
 * Create the associated legend in the view
 * @param {ArchimateView} view 
 * @param {ColorScheme} scheme 
 */
function createLegend(view, scheme) {
    const GRID_SIZE = 12;
    const X_MARGIN = GRID_SIZE / 2;
    const Y_MARGIN = GRID_SIZE / 2;
    const COLOR_HEIGHT = 30;
    const COLOR_WIDTH = 12 * GRID_SIZE;
    let X_LEGEND_ORIGIN = GRID_SIZE;
    let Y_LEGEND_ORIGIN = GRID_SIZE;
    const LEGEND_WIDTH = 2 * X_MARGIN + COLOR_WIDTH;
    const LEGEND_NAME = "Color Legend";
    const LEGEND_BACKGROUND = "#F7F7F7";
    const LEGEND_FONT_STYLE = "bold";

    const isCategorical = scheme.type == "Categorical";
    const spacing = (isCategorical) ? Y_MARGIN : 0;

    const currentLegend = $(view).find("." + LEGEND_NAME).filter("diagram-model-group").first();
    if (currentLegend && scheme.resetDefault) {
        log.info(`previous ${LEGEND_NAME} found, deleting`)
        X_LEGEND_ORIGIN = currentLegend.bounds.x; 
        Y_LEGEND_ORIGIN = currentLegend.bounds.y;
        currentLegend.delete();
    }
    const legendGroup = view.createObject(
        "diagram-model-group", X_LEGEND_ORIGIN, Y_LEGEND_ORIGIN, LEGEND_WIDTH, 
            COLOR_HEIGHT + (COLOR_HEIGHT + spacing) * Object.keys(scheme.colormap).length + spacing
        );
    legendGroup.name = LEGEND_NAME;
    legendGroup.fillColor = LEGEND_BACKGROUND;
    legendGroup.fontStyle = LEGEND_FONT_STYLE
    legendGroup.borderType = BORDER.RECTANGLE;

    let y = COLOR_HEIGHT;
    // FIXME sort order is different, only reason to access scale
    // will be handled by return Object keys order
    for (let label in scheme.colormap) {
        log.trace(`legend color is ${scheme.colormap[label]} for label '${label}'`);
        let colLegend = legendGroup.createObject("diagram-model-note", X_MARGIN, y, COLOR_WIDTH, COLOR_HEIGHT);
        y += COLOR_HEIGHT + spacing -1;
        colLegend.fillColor = scheme.colormap[label].toString();
        colLegend.borderType = isCategorical ? BORDER.RECTANGLE : BORDER.NONE;
        colLegend.text = scheme.name + " = " + label;
    }
}

log.info("> Colormap script starts")

/** @type ArchimateView */
const theView = $(selection).parents().add(selection).filter("archimate-diagram-model").first();

if (!theView) {
    MessageDialog.openError(shell, "No view selected", "Please select a view in the diagram area or in the model tree");
    log.error("No view selected. Stopping");
    exit();
}

const propertiesInView = gatherViewPropertiesInfo(theView);

if (Object.keys(propertiesInView).length == 0) {
    MessageDialog.openError(shell, "No properties", "No property found among the views elements");
    log.error("No property found in these views elements. Stopping");
    exit();    
}

{
    const dir = __SCRIPTS_DIR__ + 'lib/Colormap.scheme';
    if (!mkdirs(dir)) {
        MessageDialog.openWarning(shell, "Color scheme saving", `Cannot create directory '${dir}' for storing color scheme.\nWon't be able to save them for default colors.`);
        log.warn(`Not possible to create directory '${dir}' for storing color scheme`);
    }
}

// FIXME cModel is a global variable declared in ColormapModel.js and shared with ColormapWizard.js :-(
cModel = new ColorModel(propertiesInView);
const scheme = wizardExecute();
if (scheme) {
    applyColormap(theView, scheme);
    createLegend(theView, scheme);
} else {
    log.warn("execution cancelled");
}

log.info("> Colormap script end.");
